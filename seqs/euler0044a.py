#!/usr/bin/python
r"""Pentagon numbers

    Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$.  The
    first ten pentagonal numbers are:

    $$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \ldots$$

    It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$.  However, their
    difference, $70-22 = 48$, is not pentagonal.

    Find the pair of pentagonal numbers, $P_j and P_k$, for which their sum and
    difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the
    value of $D$?"""

# Find the smallest $D = P_k + 3nk$ that is pentagonal and such that $2P_n +
# P_k + 3nk = 2P_n + D$ is pentagonal.

import itertools
import sys; sys.path.insert(1, sys.path[0] + '/..')
from   eulerlib import ascending_range2

__tags__ = ['minimization', 'pentagonal numbers', 'integer sequences']

def pent(n):
    return n*(3*n-1) // 2

pentCache = set()
maxCache = 0
caches = itertools.imap(pent, itertools.count(1))

def isPent(n):
    global maxCache
    while n > maxCache:
        maxCache = next(caches)
        pentCache.add(maxCache)
    return n in pentCache

def mknext(k,n):
    k += 1
    n += 1
    D = pent(k) + 3*n*k
    return D, 2*pent(n) + D

def solve():
    #for D,n in ascending_range(lambda k,n: (pent(k+1) + 3*(n+1)*(k+1), n+1), 2):
    for D,n in ascending_range2(lambda k,n: (pent(k+1) + 3*(n+1)*(k+1), n+1)):
        if isPent(D) and isPent(2*pent(n) + D):
            return D

if __name__ == '__main__':
    print solve()
