#!/usr/bin/python
r"""Pentagon numbers

    Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$.  The
    first ten pentagonal numbers are:

    $$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \ldots$$

    It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$.  However, their
    difference, $70-22 = 48$, is not pentagonal.

    Find the pair of pentagonal numbers, $P_j and P_k$, for which their sum and
    difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the
    value of $D$?"""

# Find the smallest $D = P_k + 3nk$ that is pentagonal and such that $2P_n +
# P_k + 3nk = 2P_n + D$ is pentagonal.

import heapq
import itertools

def pent(n): return n*(3*n-1) // 2

def pentagons(): return itertools.imap(pent, itertools.count(1))

pentCache = set()
maxCache = 0
(pents, caches) = itertools.tee(pentagons(), 2)
pents.next()

def isPent(n):
    global maxCache
    while n > maxCache:
        maxCache = caches.next()
        pentCache.add(maxCache)
    return n in pentCache

queue = [(4, 1, 1, 1)]

while True:
    (D, Pk, k, n) = heapq.heappop(queue)
    if isPent(D) and isPent(2*pent(n) + D):
        print D
        break
    heapq.heappush(queue, (Pk + 3*(n+1)*k, Pk, k, n+1))
    if n == 1:
        Pk_1 = pents.next()
        heapq.heappush(queue, (Pk_1 + 3*(k+1), Pk_1, k+1, 1))
