#!/usr/bin/python
"""Cyclical figurate numbers

   Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
   are all figurate (polygonal) numbers and are generated by the following
   formulae:

       Triangle        $P_{3,n}=n(n+1)/2$      1, 3, 6, 10, 15, ...
       Square          $P_{4,n}=n^2$           1, 4, 9, 16, 25, ...
       Pentagonal      $P_{5,n}=n(3n-1)/2$     1, 5, 12, 22, 35, ...
       Hexagonal       $P_{6,n}=n(2n-1)$       1, 6, 15, 28, 45, ...
       Heptagonal      $P_{7,n}=n(5n-3)/2$     1, 7, 18, 34, 55, ...
       Octagonal       $P_{8,n}=n(3n-2)$       1, 8, 21, 40, 65, ...

   The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
   interesting properties.

   1. The set is cyclic, in that the last two digits of each number is the
      first two digits of the next number (including the last number with the
      first).

   2. Each polygonal type: triangle ($P_{3,127}=8128$), square
      ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a
      different number in the set.

   3. This is the only set of 4-digit numbers with this property.

   Find the sum of the only ordered set of six cyclic 4-digit numbers for which
   each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal,
   and octagonal, is represented by a different number in the set."""

from   collections import defaultdict, namedtuple
from   fractions   import Fraction
from   math        import ceil, floor, sqrt
import sys

def fourDigits(a,b):
    start = int(ceil((-b + sqrt(b*b + 4000 * a)) / (2*a)))
    stop = int(ceil((-b + sqrt(b*b + 40000 * a)) / (2*a)))
    return [int(n*(a*n + b)) for n in xrange(start, stop)]

coefs = [
    (Fraction(1,2), Fraction(1,2)),   # triangle
    (1, 0),                           # square
    (Fraction(3,2), Fraction(-1,2)),  # pentagonal
    (2, -1),                          # hexagonal
    (Fraction(5,2), Fraction(-3,2)),  # heptagonal
    (3, -2),                          # octagonal
]

class Node(namedtuple('Node', 'digitPairs remaining')):
    __slots__ = ()

    def nextNodes(self):
        for i,seq in enumerate(self.remaining):
            newRemains = self.remaining[:i] + self.remaining[i+1:]
            for nextpair in seq[self.digitPairs[-1]]:
                yield Node(self.digitPairs + (nextpair,), newRemains)

    def success(self):
        return not self.remaining and self.digitPairs[0] == self.digitPairs[-1]

    def answer(self):
        return sum(int(a+b) for a,b in zip(self.digitPairs,self.digitPairs[1:]))


digitmaps = []
for a,b in coefs:
    mapping = defaultdict(list)
    for x in fourDigits(a,b):
        d,e,f,g = str(x)
        if f != '0':
            mapping[d+e].append(f+g)
    digitmaps.append(mapping)

for x, xs in digitmaps[0].iteritems():
    nodes = [Node((x,y), digitmaps[1:]) for y in xs]
    for _ in xrange(len(digitmaps)-1):
        nodes = [n2 for n1 in nodes for n2 in n1.nextNodes()]
    for n in nodes:
        if n.success():
            print n.answer()
            sys.exit(0)
